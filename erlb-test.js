function erlb_test() {
    function doTest(msg, actual, expected) {
        ok(Erl.encode(actual).equals(expected), "Encode " + msg);
        ok(Erl.equals(actual, Erl.decode(Erl.toArrayBuffer(expected))), "Decode " + msg);
    }

    doTest("string",        "abcd",             [131,107,0,4,97,98,99,100]);
    doTest("atom",          Erl.atom("hello"),  [131,100,0,5,104,101,108,108,111]);
    doTest("bool(true)",    true,               [131,100,0,4,116,114,117,101]);
    doTest("bool(false)",   false,              [131,100,0,5,102,97,108,115,101]);
    doTest("int(0)",        0,                  [131,97,0]);
    doTest("int(255)",      255,                [131,97,255]);
    doTest("int(-1)",       -1,                 [131,98,255,255,255,255]);
    doTest("int(1 << 48)",  281474976710656,    [131,110,7,0,0,0,0,0,0,0,1]);
    doTest("int(-((1<<48)+257))",-281474976710913,[131,110,7,1,1,1,0,0,0,0,1]);
    doTest("float(123.4)",  123.4,              [131,70,64,94,217,153,153,153,153,154]);
    doTest("float(-1.5e-3)",-1.5e-3,            [131,70,191,88,147,116,188,106,126,250]);
    doTest("pid", Erl.pid("a@b",48,0,0),        [131,103,100,0,3,97,64,98,0,0,0,48,0,0,0,0,0]);
    doTest("ref", Erl.ref("a@b",0,[154,1,2]),   [131,114,0,3,100,0,3,97,64,98,0,0,0,0,154,0,0,0,1,0,0,0,2]);
    doTest('tuple{1,"a",3.1}', Erl.tuple(1,"a",3.1), [131,104,3,97,1,107,0,1,97,70,64,8,204,204,204,204,204,205]);
    doTest('list[]',        [],                 [131,106]);
    doTest('list[1,"a",3.1]', [1,"a",3.1],      [131,108,0,0,0,3,97,1,107,0,1,97,70,64,8,204,204,204,204,
                                                 204,205,106]);
    doTest("tuple{1,\"a\",{'x',23,[]},true}", Erl.tuple(1,"a",Erl.tuple(Erl.atom('x'),23,[]),true),
                                                [131,104,4,97,1,107,0,1,97,104,3,100,0,1,120,97,23,106,
                                                 100,0,4,116,114,117,101]);

}
